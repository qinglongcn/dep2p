// In order to re-generate the golang packages for `Message` you will need...
// 1. Protobuf binary (tested with protoc 3.0.0). - https://github.com/gogo/protobuf/releases
// 2. Gogo Protobuf (tested with gogo 0.3). - https://github.com/gogo/protobuf
// 3. To have cloned `libp2p/go-libp2p-{record,kad-dht}` under the same directory.
// Now from `libp2p/go-libp2p-kad-dht/pb` you can run...
// `protoc --gogo_out=. --proto_path=../../go-libp2p-record/pb/ --proto_path=./ dht.proto`

syntax = "proto3";
package dht.pb;

import "github.com/libp2p/go-libp2p-record/pb/record.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

message Message {
	enum MessageType {
		PUT_VALUE = 0;		// PUT_VALUE 消息类型，用于在 DHT 中设置一个键值对。
		GET_VALUE = 1;		// GET_VALUE 消息类型，用于从 DHT 中获取一个键的值。
		ADD_PROVIDER = 2;	// ADD_PROVIDER 消息类型，表示一个节点提供了某资源。
		GET_PROVIDERS = 3;	// GET_PROVIDERS 消息类型，用于查询提供某个资源的节点。
		FIND_NODE = 4;		// FIND_NODE 消息类型，用于查找网络中的某个节点。
		PING = 5;			// PING 消息类型，用于检查另一个节点是否在线。
	}

	enum ConnectionType {
		// 发送方没有与对等方的连接，并且没有额外信息（默认）
		NOT_CONNECTED = 0;

		// 发送者与对等方有实时连接
		CONNECTED = 1;

		// 发件人最近连接到对等方
		CAN_CONNECT = 2;

		// 发件人最近多次尝试连接对等方但连接失败
		// ("try" here is loose, but this should signal "made strong effort, failed")
		CANNOT_CONNECT = 3;
	}

	message Peer {
		// 给定对等点的 ID。
		bytes id = 1 [(gogoproto.customtype) = "byteString", (gogoproto.nullable) = false];

		// 给定对等点的多地址
		repeated bytes addrs = 2;

		// 用于向对等方表明发送方的连接能力
		ConnectionType connection = 3;
	}

	// 新增的 ClosestPeers 数据结构，用于节点发现时握手
	message ClosestPeers {
		bytes self = 1; // 本地对等节点（自己）
		int32 mode = 2; // 当前模式
	}

	ClosestPeers closestPeers = 11; // 给新字段一个唯一的序号

	// 定义它是什么类型的消息。
	MessageType type = 1;

	// 定义此查询/响应属于哪个珊瑚簇级别。
	// 如果我们将来想实现珊瑚的簇环。
	int32 clusterLevelRaw = 10;

	// 用于指定与该消息关联的密钥。
	// PUT_VALUE, GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	bytes key = 2;

	// 用于传输附加值
	bytes value =12;

	// 用于返回一个值
	// PUT_VALUE, GET_VALUE
	record.pb.Record record = 3;

	// 用于返回更接近查询中的键的对等点
	// GET_VALUE, GET_PROVIDERS, FIND_NODE
	repeated Peer closerPeers = 8 [(gogoproto.nullable) = false];

	// 用于返回Provider
	// GET_VALUE, ADD_PROVIDER, GET_PROVIDERS
	repeated Peer providerPeers = 9 [(gogoproto.nullable) = false];
}
